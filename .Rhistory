fillOpacity = .5,
popup = c(~hive_id, '/n', ~breed) )
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = breed
stroke = FALSE,
fillOpacity = .5,
popup = c(hive_id, '/n', breed) )
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ,
stroke = FALSE,
fillOpacity = .5,
popup = c(hive_id, '/n', breed) )
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = breed,
stroke = FALSE,
fillOpacity = .5,
popup = c(hive_id, '/n', breed) )
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~breed,
stroke = FALSE,
fillOpacity = .5,
popup = c(hive_id, '/n', breed) )
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~breed,
stroke = FALSE,
fillOpacity = .5,
popup = c(~hive_id, '/n', ~breed) )
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~breed,
stroke = FALSE,
fillOpacity = .5)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~queen_type_id,
stroke = FALSE,
fillOpacity = .5)
leaflet(data = latlng) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5)
test <- read.delim("~/Desktop/test.csv")
queens <- read.delim("~/Desktop/HT/queens.csv")
library(dplyr)
library(sp)
library(leaflet)
# Shows if hive_updated is different or not
unID <- test %>%
group_by(customer_id) %>%
summarize(n = n(), diff = length(unique(hive_updated)))
index <- unID$diff >= 2
test2 <- test[index,]
index <- !is.na(as.numeric(as.character(test2$hive_id)))
test3 <- test2[index,]
#test4 <- test3[test3$customer_id %in% unID2$customer_id,]
b1 <- test2 %>% filter(customer_id == 10383)
latlng <- unique(test3[,c('lat', 'lng')])
latlng <- na.omit(latlng)
exists <- (abs(latlng[,1]) <= 90) & (latlng[,1] != 0) & (latlng[,2] != 0) & (abs(latlng[,2]) <= 180)
latlng <- latlng[exists,]
hives_pts <- test3[exists,]
crs <- CRS("+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +units=m +no_defs ")
sp <- SpatialPoints(coords = latlng)
proj4string(sp) <- crs
leaflet(data = latlng) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5)
breeds <- queens_f %>% group_by(breed) %>% summarise(n = n())
#breeds <- breeds[order(breeds$n, decreasing = TRUE),]
ggplot(data = breeds) + geom_bar(aes(x = reorder(breed, -n), y = n, fill = breed), stat = 'identity') + theme_minimal() + theme(legend.position="none", axis.text.x=element_text(angle=45,hjust=1))
#trying to plot by queen color
hives_pts$hive_id <- as.integer(hives_pts$hive_id)
queens_pts <- left_join(hives_pts, queens_f)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~queen_type_id,
stroke = FALSE,
fillOpacity = .5)
test <- read.delim("~/Desktop/HT/test.csv")
queens <- read.delim("~/Desktop/HT/queens.csv")
library(dplyr)
library(sp)
library(leaflet)
# Shows if hive_updated is different or not
unID <- test %>%
group_by(customer_id) %>%
summarize(n = n(), diff = length(unique(hive_updated)))
index <- unID$diff >= 2
test2 <- test[index,]
index <- !is.na(as.numeric(as.character(test2$hive_id)))
test3 <- test2[index,]
#test4 <- test3[test3$customer_id %in% unID2$customer_id,]
b1 <- test2 %>% filter(customer_id == 10383)
latlng <- unique(test3[,c('lat', 'lng')])
latlng <- na.omit(latlng)
exists <- (abs(latlng[,1]) <= 90) & (latlng[,1] != 0) & (latlng[,2] != 0) & (abs(latlng[,2]) <= 180)
latlng <- latlng[exists,]
hives_pts <- test3[exists,]
crs <- CRS("+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +units=m +no_defs ")
sp <- SpatialPoints(coords = latlng)
proj4string(sp) <- crs
leaflet(data = latlng) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5)
breeds <- queens_f %>% group_by(breed) %>% summarise(n = n())
#breeds <- breeds[order(breeds$n, decreasing = TRUE),]
ggplot(data = breeds) + geom_bar(aes(x = reorder(breed, -n), y = n, fill = breed), stat = 'identity') + theme_minimal() + theme(legend.position="none", axis.text.x=element_text(angle=45,hjust=1))
#trying to plot by queen color
hives_pts$hive_id <- as.integer(hives_pts$hive_id)
queens_pts <- left_join(hives_pts, queens_f)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~queen_type_id,
stroke = FALSE,
fillOpacity = .5)
leaflet(data = latlng) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = has_bees) %>%
addPopups(~customer_id, name)
leaflet(data = latlng) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
leaflet(data = latlng) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = latlng$has_bees) %>%
addPopups(~customer_id, ~name)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = latlng$has_bees) %>%
addPopups(~customer_id, ~name)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
breeds <- queens_f %>% group_by(breed) %>% summarise(n = n())
View(queens)
test <- read.delim("~/Desktop/HT/test.csv")
queens <- read.delim("~/Desktop/HT/queens_f.csv")
library(dplyr)
library(sp)
library(leaflet)
# Shows if hive_updated is different or not
unID <- test %>%
group_by(customer_id) %>%
summarize(n = n(), diff = length(unique(hive_updated)))
index <- unID$diff >= 2
test2 <- test[index,]
index <- !is.na(as.numeric(as.character(test2$hive_id)))
test3 <- test2[index,]
#test4 <- test3[test3$customer_id %in% unID2$customer_id,]
b1 <- test2 %>% filter(customer_id == 10383)
latlng <- unique(test3[,c('lat', 'lng')])
latlng <- na.omit(latlng)
exists <- (abs(latlng[,1]) <= 90) & (latlng[,1] != 0) & (latlng[,2] != 0) & (abs(latlng[,2]) <= 180)
latlng <- latlng[exists,]
hives_pts <- test3[exists,]
crs <- CRS("+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +units=m +no_defs ")
sp <- SpatialPoints(coords = latlng)
proj4string(sp) <- crs
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
breeds <- queens_f %>% group_by(breed) %>% summarise(n = n())
#breeds <- breeds[order(breeds$n, decreasing = TRUE),]
ggplot(data = breeds) + geom_bar(aes(x = reorder(breed, -n), y = n, fill = breed), stat = 'identity') + theme_minimal() + theme(legend.position="none", axis.text.x=element_text(angle=45,hjust=1))
#trying to plot by queen color
hives_pts$hive_id <- as.integer(hives_pts$hive_id)
queens_pts <- left_join(hives_pts, queens_f)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~queen_type_id,
stroke = FALSE,
fillOpacity = .5)
test <- read.delim("~/Desktop/HT/test.csv")
queens_f <- read.delim("~/Desktop/HT/queens_f.csv")
library(dplyr)
library(sp)
library(leaflet)
# Shows if hive_updated is different or not
unID <- test %>%
group_by(customer_id) %>%
summarize(n = n(), diff = length(unique(hive_updated)))
index <- unID$diff >= 2
test2 <- test[index,]
index <- !is.na(as.numeric(as.character(test2$hive_id)))
test3 <- test2[index,]
#test4 <- test3[test3$customer_id %in% unID2$customer_id,]
b1 <- test2 %>% filter(customer_id == 10383)
latlng <- unique(test3[,c('lat', 'lng')])
latlng <- na.omit(latlng)
exists <- (abs(latlng[,1]) <= 90) & (latlng[,1] != 0) & (latlng[,2] != 0) & (abs(latlng[,2]) <= 180)
latlng <- latlng[exists,]
hives_pts <- test3[exists,]
crs <- CRS("+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +units=m +no_defs ")
sp <- SpatialPoints(coords = latlng)
proj4string(sp) <- crs
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
breeds <- queens_f %>% group_by(breed) %>% summarise(n = n())
#breeds <- breeds[order(breeds$n, decreasing = TRUE),]
ggplot(data = breeds) + geom_bar(aes(x = reorder(breed, -n), y = n, fill = breed), stat = 'identity') + theme_minimal() + theme(legend.position="none", axis.text.x=element_text(angle=45,hjust=1))
#trying to plot by queen color
hives_pts$hive_id <- as.integer(hives_pts$hive_id)
queens_pts <- left_join(hives_pts, queens_f)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~queen_type_id,
stroke = FALSE,
fillOpacity = .5)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
View(queens_pts)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = 1,
color = ~has_bees)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~has_bees) %>%
addPopups(~customer_id, ~name)
ggplot(data = breeds) + geom_bar(aes(x = reorder(breed, -n), y = n, fill = breed), stat = 'identity') + theme_minimal() + theme(legend.position="none", axis.text.x=element_text(angle=45,hjust=1))
library(ggplot2)
ggplot(data = breeds) + geom_bar(aes(x = reorder(breed, -n), y = n, fill = breed), stat = 'identity') + theme_minimal() + theme(legend.position="none", axis.text.x=element_text(angle=45,hjust=1))
#trying to plot by queen color
hives_pts$hive_id <- as.integer(hives_pts$hive_id)
queens_pts <- left_join(hives_pts, queens_f)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~queen_type_id,
stroke = FALSE,
fillOpacity = .5)
ggplot(data = breeds) + geom_bar(aes(x = reorder(breed, -n), y = n, fill = breed), stat = 'identity') + theme_minimal() + theme(legend.position="none", axis.text.x=element_text(angle=45,hjust=1))
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~pal(queen_type_id),
stroke = FALSE,
fillOpacity = .5)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~pal(has_bees)) %>%
addPopups(~customer_id, ~name)
library(rgdal)
install.packages('RColorBrewer')
library(RColorBrewer)
pal <- colorNumeric(palette = 'Blues',)
pal <- colorNumeric(palette = 'Blues',)
pal <- colorNumeric(palette = 'Blues',
domain = hives_pts$has_bees)
pal
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~pal(has_bees)) %>%
addPopups(~customer_id, ~name)
leaflet(data = hives_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
stroke = FALSE,
fillOpacity = .5,
color = ~pal(has_bees))
table(hives_pts$has_bees)
pal <- colorNumeric(palette = 'Spectral',
domain = queens_pts$breed)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~pal(queen_type_id),
stroke = FALSE,
fillOpacity = .5)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = pal,
stroke = FALSE,
fillOpacity = .5)
pal <- colorNumeric(palette = 'Paired',
domain = queens_pts$breed)
pal <- colorNumeric(palette = 'Blues',
domain = queens_pts$breed)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = pal,
stroke = FALSE,
fillOpacity = .5)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~pal(breed),
stroke = FALSE,
fillOpacity = .5)
leaflet(data = queens_pts) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat,
radius = 5,
color = ~pal(breed),
stroke = FALSE,
fillOpacity = .5)
#Newcastle Sensors
library(readr)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggplot2)
#####Fanning#####
#d <- read.table('http://uoweb1.ncl.ac.uk/api/v1/sensors/data/raw.csv?start_time=20150101000000&end_time=20170922000000&sensor_type=Weather&api_key=zvsa1dg8ty8eeknb8ndnz8e0jvsk8yhx8nfz8d8lskfwohzzowzmw0rnv2sr65h64og3n6qoxlrjyvegh9rsnkskgw')
setwd("~/Desktop/Programming/HiveTracks/")
data <- read_csv("threemonths.csv")
data_t <- data %>% group_by(name) %>% spread(Variable, Value)
data_t$Timestamp <- ymd_hms(data_t$Timestamp)
write.csv(data_t, 'three_cleaned.csv')
dfs <- split(data_t, interaction(data_t$name), drop = TRUE)
b1 <- data_t %>% filter(name == 'beehive_54630')
plot(b1$Timestamp, b1$`Mean Fanning`, type = 'l')
fan <- data.frame(b1$Timestamp, b1$`Mean Fanning`, row.names = NULL)
fan <- na.omit(fan)
fan <- fan[23:dim(fan)[1],]
brood <- data.frame(b1$Timestamp, b1$Brood, row.names = NULL)
brood <- na.omit(brood)
month <- fan %>% filter(b1.Timestamp >= ymd_hms('2017-06-21 00:00:00') & b1.Timestamp <= ymd_hms('2017-07-28 00:00:00'))
month_b <- brood %>% filter(b1.Timestamp >= ymd_hms('2017-06-21 00:00:00') & b1.Timestamp <= ymd_hms('2017-07-28 00:00:00'))
source('gesd.R')
a <- gesd(fan$b1..Mean.Fanning., value.zscore = 'NO', alpha = .95)
fan$a <- a[2:length(a)]
aug <- fan %>% filter(month(b1.Timestamp) == 8)
aug_b <- brood %>% filter(month(b1.Timestamp) == 8)
#doesn't consider periodicity
#correlates with temp?
ggplot(aug, aes(x = b1.Timestamp, y = log(b1..Mean.Fanning.))) + geom_point(aes(color = as.factor(a))) + geom_line()
#+ geom_bar(data = aug_b, aes(y = log(b1.Brood)), stat = 'identity')
#####Weight######
b2 <- data_t %>% filter(name == 'beehive_54440')
plot(b2$Timestamp, b2$`Hive Activity`, type = 'l')
######Map#####
un <- unique(data_t[c('lon', 'lat')])
leaflet(data = un) %>%
addTiles() %>%
addCircleMarkers(~lon, ~lat,
radius = 5,
stroke = F,
fillOpacity = .5)
View(data_t)
View(b1)
lpf <- function( y, t, f ) {
rc <- 1 / ( 2 * pi * f )
a  <- t / ( t + rc )
n  <- length( y )
yf <- y
for( i in 2:length(y) ) {
yf[i] <- a * y[i] + (1-a) * yf[i-1]
}
return( yf )
}
lpf(y = b1$`Hive Activity`, t = 3600, f = 5)
install.packages('signal')
bartlett(b1$`Hive Activity`)
library(signal)
bartlett(b1$`Hive Activity`)
View(b1)
n <- 51
plot(bartlett(n), type = "l", ylim = c(0,1))
plot(blackman(n), type = "l", ylim = c(0,1))
plot(boxcar(n), type = "l", ylim = c(0,1))
plot(flattopwin(n), type = "l", ylim = c(0,1))
plot(gausswin(n, 5), type = "l", ylim = c(0,1))
plot(hanning(n), type = "l", ylim = c(0,1))
plot(hamming(n), type = "l", ylim = c(0,1))
plot(triang(n), type = "l", ylim = c(0,1))
######Map#####
un <- unique(data_t[c('lon', 'lat')])
leaflet(data = un) %>%
addTiles() %>%
addCircleMarkers(~lon, ~lat,
radius = 5,
stroke = F,
fillOpacity = .5)
library(leaflet)
######Map#####
un <- unique(data_t[c('lon', 'lat')])
leaflet(data = un) %>%
addTiles() %>%
addCircleMarkers(~lon, ~lat,
radius = 5,
stroke = F,
fillOpacity = .5)
